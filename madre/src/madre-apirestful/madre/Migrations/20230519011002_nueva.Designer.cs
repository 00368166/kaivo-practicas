// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using madre.Data;

#nullable disable

namespace madre.Migrations
{
    [DbContext(typeof(MadreContext))]
    [Migration("20230519011002_nueva")]
    partial class nueva
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("madre.Data.ComputadoraHija", b =>
                {
                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Permiso")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Ip");

                    b.ToTable("ComputadorasHijas");

                    b.HasData(
                        new
                        {
                            Ip = "192.168.1.210:7050",
                            Nombre = "Computadora 1",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.211:7051",
                            Nombre = "Computadora 2",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.212:7052",
                            Nombre = "Computadora 3",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.213:7053",
                            Nombre = "Computadora 4",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.214:7054",
                            Nombre = "Computadora 5",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.215:7055",
                            Nombre = "Computadora 6",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.216:7056",
                            Nombre = "Computadora 7",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.217:7057",
                            Nombre = "Computadora 8",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.218:7058",
                            Nombre = "Computadora 9",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.219:7059",
                            Nombre = "Computadora 10",
                            Permiso = false,
                            Status = false
                        },
                        new
                        {
                            Ip = "192.168.1.220:7060",
                            Nombre = "Computadora 11",
                            Permiso = false,
                            Status = false
                        });
                });

            modelBuilder.Entity("madre.Data.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Errores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Error 1: causa impredecible",
                            ErrorCode = "ERR001"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Error 2: causa imposible",
                            ErrorCode = "ERR002"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Error 3: causa improvable",
                            ErrorCode = "ERR003"
                        });
                });

            modelBuilder.Entity("madre.Data.ErrorRegistro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ErrorId")
                        .HasColumnType("int");

                    b.Property<int>("RegistroProgramaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ErrorId");

                    b.HasIndex("RegistroProgramaId");

                    b.ToTable("ErroresRegistros");
                });

            modelBuilder.Entity("madre.Data.RegistroPrograma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ComputadoraHijaIp")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ErrorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombrePrograma")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.Property<string>("TituloVentana")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ventana")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ComputadoraHijaIp");

                    b.HasIndex("ErrorId");

                    b.ToTable("RegistrosProgramas");
                });

            modelBuilder.Entity("madre.Data.ErrorRegistro", b =>
                {
                    b.HasOne("madre.Data.Error", "Error")
                        .WithMany("ErroresRegistros")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("madre.Data.RegistroPrograma", "RegistroPrograma")
                        .WithMany("ErroresRegistros")
                        .HasForeignKey("RegistroProgramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("RegistroPrograma");
                });

            modelBuilder.Entity("madre.Data.RegistroPrograma", b =>
                {
                    b.HasOne("madre.Data.ComputadoraHija", "ComputadoraHija")
                        .WithMany("RegistrosProgramas")
                        .HasForeignKey("ComputadoraHijaIp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("madre.Data.Error", "Error")
                        .WithMany("RegistrosProgramas")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComputadoraHija");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("madre.Data.ComputadoraHija", b =>
                {
                    b.Navigation("RegistrosProgramas");
                });

            modelBuilder.Entity("madre.Data.Error", b =>
                {
                    b.Navigation("ErroresRegistros");

                    b.Navigation("RegistrosProgramas");
                });

            modelBuilder.Entity("madre.Data.RegistroPrograma", b =>
                {
                    b.Navigation("ErroresRegistros");
                });
#pragma warning restore 612, 618
        }
    }
}
